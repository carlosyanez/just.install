svn        = {remotes::install_svn(source_param)},
url        = {remotes::install_url(source_param)}
)
source_type <- "CRAN"
package_name <- "magrittr"
source_param <- ""
switch(source_type,
bioc       = {remotes::install_bioc(package_name)},
bitbucket  = {remotes::install_bitbucket(source_param)},
cran       = {remotes::install_cran(package_name)},
r-universe = {remotes::install_cran(package_name,repos=source_param)},
dev        = {remotes::install_dev(package_name)},
git        = {remotes::install_git(source_param)},
github     = {remotes::install_github(source_param)},
gitlab     = {remotes::install_gitlab(source_param)},
local      = {remotes::install_local(source_param)},
svn        = {remotes::install_svn(source_param)},
url        = {remotes::install_url(source_param)}
)
source_type <- "CRAN"
package_name <- "magrittr"
source_param <- ""
switch(source_type,
bioc       = {remotes::install_bioc(package_name)},
bitbucket  = {remotes::install_bitbucket(source_param)},
cran       = {remotes::install_cran(package_name)},
r-universe = {remotes::install_cran(package_name,repos=source_param)},
dev        = {remotes::install_dev(package_name)},
git        = {remotes::install_git(source_param)},
github     = {remotes::install_github(source_param)},
gitlab     = {remotes::install_gitlab(source_param)},
local      = {remotes::install_local(source_param)},
svn        = {remotes::install_svn(source_param)},
url        = {remotes::install_url(source_param)}
)
source_type <- "CRAN"
package_name <- "magrittr"
source_param <- ""
switch(source_type,
bioc       = {remotes::install_bioc(package_name)},
bitbucket  = {remotes::install_bitbucket(source_param)},
cran       = {remotes::install_cran(package_name)},
r-universe = {remotes::install_cran(package_name,repos=source_param)},
dev        = {remotes::install_dev(package_name)},
git        = {remotes::install_git(source_param)},
github     = {remotes::install_github(source_param)},
gitlab     = {remotes::install_gitlab(source_param)},
local      = {remotes::install_local(source_param)},
svn        = {remotes::install_svn(source_param)},
url        = {remotes::install_url(source_param)}
)
source_type <- "cran"
package_name <- "magrittr"
source_param <- ""
switch(source_type,
bioc       = {remotes::install_bioc(package_name)},
bitbucket  = {remotes::install_bitbucket(source_param)},
cran       = {remotes::install_cran(package_name)},
r-universe = {remotes::install_cran(package_name,repos=source_param)},
dev        = {remotes::install_dev(package_name)},
git        = {remotes::install_git(source_param)},
github     = {remotes::install_github(source_param)},
gitlab     = {remotes::install_gitlab(source_param)},
local      = {remotes::install_local(source_param)},
svn        = {remotes::install_svn(source_param)},
url        = {remotes::install_url(source_param)}
)
switch(source_type,
bioc       = {remotes::install_bioc(package_name)}
)
switch(source_type,
bioc       = {remotes::install_bioc(package_name)},
bitbucket  = {remotes::install_bitbucket(source_param)})
switch(source_type,
bioc       = {remotes::install_bioc(package_name)},
bitbucket  = {remotes::install_bitbucket(source_param)}
#      cran       = {remotes::install_cran(package_name)},
)
switch(source_type,
bioc       = {remotes::install_bioc(package_name)},
bitbucket  = {remotes::install_bitbucket(source_param)},
cran       = {remotes::install_cran(package_name)}
)
switch(source_type,
bioc       = {remotes::install_bioc(package_name)},
bitbucket  = {remotes::install_bitbucket(source_param)},
cran       = {remotes::install_cran(package_name)}
)
source_type <- "b"
package_name <- "magrittr"
source_param <- ""
switch(source_type,
bioc       = {remotes::install_bioc(package_name)},
bitbucket  = {remotes::install_bitbucket(source_param)},
cran       = {remotes::install_cran(package_name)},
r-universe = {remotes::install_cran(package_name,repos=source_param)}
)
switch(source_type,
bioc       = {remotes::install_bioc(package_name)},
bitbucket  = {remotes::install_bitbucket(source_param)},
cran       = {remotes::install_cran(package_name)},
dev        = {remotes::install_dev(package_name)},
git        = {remotes::install_git(source_param)},
github     = {remotes::install_github(source_param)},
gitlab     = {remotes::install_gitlab(source_param)},
local      = {remotes::install_local(source_param)},
svn        = {remotes::install_svn(source_param)},
url        = {remotes::install_url(source_param)}
)
library(remotes)
?install_cran
getOption("repos")
a<-getOption("repos")
switch(source_type,
bioc       = {remotes::install_bioc(package_name)},
bitbucket  = {remotes::install_bitbucket(source_param)},
cran       = {remotes::install_cran(package_name)},
dev        = {remotes::install_dev(package_name)},
git        = {remotes::install_git(source_param)},
github     = {remotes::install_github(source_param)},
gitlab     = {remotes::install_gitlab(source_param)},
local      = {remotes::install_local(source_param)},
svn        = {remotes::install_svn(source_param)},
url        = {remotes::install_url(source_param)},
r-universe = {remotes::install_cran(package_name,repos=c(source_param))}
)
switch(source_type,
"bioc"       = {remotes::install_bioc(package_name)},
"bitbucket"  = {remotes::install_bitbucket(source_param)},
"cran"       = {remotes::install_cran(package_name)},
"dev"        = {remotes::install_dev(package_name)},
"git"        = {remotes::install_git(source_param)},
"github"     = {remotes::install_github(source_param)},
"gitlab"     = {remotes::install_gitlab(source_param)},
"local"      = {remotes::install_local(source_param)},
"svn"        = {remotes::install_svn(source_param)},
"url"        = {remotes::install_url(source_param)},
"r-universe" = {remotes::install_cran(package_name,repos=c(source_param))}
)
switch(source_type,
"bioc"       = {remotes::install_bioc(package_name)},
"bitbucket"  = {remotes::install_bitbucket(source_param)},
"cran"       = {remotes::install_cran(package_name)},
"dev"        = {remotes::install_dev(package_name)},
"git"        = {remotes::install_git(source_param)},
"github"     = {remotes::install_github(source_param)},
"gitlab"     = {remotes::install_gitlab(source_param)},
"local"      = {remotes::install_local(source_param)},
"svn"        = {remotes::install_svn(source_param)},
"url"        = {remotes::install_url(source_param)},
"r-universe" = {remotes::install_cran(package_name,repos=c(source_param))}
)
install_package <- function(package_name,source_type,source_param){
### use {remotes} function based on source type
message(stringr::str_c("Installing ", package_name, " from", source_type))
switch(source_type,
"bioc"       = {remotes::install_bioc(package_name)},
"bitbucket"  = {remotes::install_bitbucket(source_param)},
"cran"       = {remotes::install_cran(package_name)},
"dev"        = {remotes::install_dev(package_name)},
"git"        = {remotes::install_git(source_param)},
"github"     = {remotes::install_github(source_param)},
"gitlab"     = {remotes::install_gitlab(source_param)},
"local"      = {remotes::install_local(source_param)},
"svn"        = {remotes::install_svn(source_param)},
"url"        = {remotes::install_url(source_param)},
"r-universe" = {remotes::install_cran(package_name,repos=c(source_param))}
)
message(stringr::str_c(package_name, " installed"))
}
?nrow
?mutate
?case_when
#' simply install packages
#'
#' Simple utility to install packages from a number of sources. It only install if it not present already.
#' It does not attach any packages, existing or to be installed.
#'
#' @return no output
#' @importFrom dplyr mutate case_when
#' @importFrom magrittr %>%
#' @import remotes
#' @importFrom BiocManager install
#' @importFrom utils  installed.packages
#' @param to_install tibble or data.frame with packages to install (attr: package: package name, source: {"CRAN","Github","Bioconductor","Other"}, url: username/package for Github, repo url for Other)
#' @param cran_repo_option CRAN repository. Defaults to system options
#' @examples
#' \dontrun{
#' to_install <- tibble::tibble(package=c("tidyverse","ochRe","customthemes"),
#'                              source=c("CRAN","Github","r-universe"),
#'                              url=c("","ropenscilabs/ochRe","https://carlosyanez.r-universe.dev"))
#'
#' just.install::justinstall(to_install)
#' }
#' @export justinstall
justinstall <- function(to_install){
# get list of installed packages
installed_packages  <- utils::installed.packages()[,1]
#determined which packages have been installed, which ones to install
there     <- to_install[to_install$package %in% installed_packages,]
missing   <- to_install[!(to_install$package %in% installed_packages),]
#main installation logic
if(nrow(there)==0){
message("None installed")
}
else{
# list all packages already installed
for(i in 1:nrow(there)){
message(there[i,]$package," already installed")
}
if(nrow(missing)==0){
message(("Nothing to install"))
}
else{
#standardise source names
missing <- missing %>%
dplyr::mutate(source_type=tolower(source_type),
source_type=dplyr::case_when(
source_type=="gh"           ~ 'github',
source_type=="universe"     ~ 'r-universe',
source_type=="bioconductor" ~ 'bioc',
TRUE ~ source_type
)
)
# installing new packages
for(i in 1:nrow(missing)){
install_package(missing[i,]$package,missing[i,]$source,missing[i,]$url)
}
message("Task done. Goodbye!")
}
}
}
#' internal function to that installs a single package based on data provided
#' @return no output
#' @import remotes
#' @importFrom stringr str_c
install_package <- function(package_name,source_type,source_param){
### use {remotes} function based on source type
message(stringr::str_c("Installing ", package_name, " from", source_type))
switch(source_type,
"bioc"       = {remotes::install_bioc(package_name)},
"bitbucket"  = {remotes::install_bitbucket(source_param)},
"cran"       = {remotes::install_cran(package_name)},
"dev"        = {remotes::install_dev(package_name)},
"git"        = {remotes::install_git(source_param)},
"github"     = {remotes::install_github(source_param)},
"gitlab"     = {remotes::install_gitlab(source_param)},
"local"      = {remotes::install_local(source_param)},
"svn"        = {remotes::install_svn(source_param)},
"url"        = {remotes::install_url(source_param)},
"r-universe" = {remotes::install_cran(package_name,repos=c(source_param))}
)
message(stringr::str_c(package_name, " installed"))
}
?install_bioc
justinstall <- function(to_install){
# get list of installed packages
installed_packages  <- utils::installed.packages()[,1]
#determined which packages have been installed, which ones to install
there     <- to_install[to_install$package %in% installed_packages,]
missing   <- to_install[!(to_install$package %in% installed_packages),]
#main installation logic
if(nrow(there)==0){
message("None installed")
}
else{
# list all packages already installed
for(i in 1:nrow(there)){
message(there[i,]$package," already installed")
}
if(nrow(missing)==0){
message(("Nothing to install"))
}
else{
#standardise source names
# fill bioconductor if source_type is empty
missing <- missing %>%
dplyr::mutate(source_type=tolower(source_type),
source_type=dplyr::case_when(
source_type=="gh"           ~ 'github',
source_type=="universe"     ~ 'r-universe',
source_type=="bioconductor" ~ 'bioc',
TRUE ~ source_type
)
) %>%
dplyr::mutate(
source_param = dplyr::case_when(
source_type=="bioc" & source_param=="" ~ source_param = source_type,
TRUE ~ source_param
)
)
# installing new packages
for(i in 1:nrow(missing)){
install_package(missing[i,]$package,missing[i,]$source,missing[i,]$url)
}
message("Task done. Goodbye!")
}
}
}
justinstall <- function(to_install){
# get list of installed packages
installed_packages  <- utils::installed.packages()[,1]
#determined which packages have been installed, which ones to install
there     <- to_install[to_install$package %in% installed_packages,]
missing   <- to_install[!(to_install$package %in% installed_packages),]
#main installation logic
if(nrow(there)==0){
message("None installed")
}
else{
# list all packages already installed
for(i in 1:nrow(there)){
message(there[i,]$package," already installed")
}
if(nrow(missing)==0){
message(("Nothing to install"))
}
else{
#standardise source names
# fill bioconductor if source_type is empty
missing <- missing %>%
dplyr::mutate(source_type=tolower(source_type),
source_type=dplyr::case_when(
source_type=="gh"           ~ 'github',
source_type=="universe"     ~ 'r-universe',
source_type=="bioconductor" ~ 'bioc',
TRUE ~ source_type
)
) %>%
dplyr::mutate(
source_param = dplyr::case_when(
source_type=="bioc" & source_param=="" ~ source_param = source_type,
TRUE ~ source_param
)
)
# installing new packages
for(i in 1:nrow(missing)){
install_package(missing[i,]$package,missing[i,]$source,missing[i,]$url)
}
message("Task done. Goodbye!")
}
}
}
justinstall <- function(to_install){
# get list of installed packages
installed_packages  <- utils::installed.packages()[,1]
#determined which packages have been installed, which ones to install
there     <- to_install[to_install$package %in% installed_packages,]
missing   <- to_install[!(to_install$package %in% installed_packages),]
#main installation logic
if(nrow(there)==0){
message("None installed")
}
else{
# list all packages already installed
for(i in 1:nrow(there)){
message(there[i,]$package," already installed")
}
if(nrow(missing)==0){
message(("Nothing to install"))
}
else{
#standardise source names
# fill bioconductor if source_type is empty
missing <- missing %>%
dplyr::mutate(source_type=tolower(source_type),
source_type=dplyr::case_when(
source_type=="gh"           ~ 'github',
source_type=="universe"     ~ 'r-universe',
source_type=="bioconductor" ~ 'bioc',
TRUE ~ source_type
)
) %>%
dplyr::mutate(
source_param = dplyr::case_when(
source_type=="bioc" & source_param=="" ~ source_param = source_type,
TRUE ~ source_param
)
)
# installing new packages
for(i in 1:nrow(missing)){
install_package(missing[i,]$package,missing[i,]$source,missing[i,]$url)
}
message("Task done. Goodbye!")
}
}
}
justinstall <- function(to_install){
# get list of installed packages
installed_packages  <- utils::installed.packages()[,1]
#determined which packages have been installed, which ones to install
there     <- to_install[to_install$package %in% installed_packages,]
missing   <- to_install[!(to_install$package %in% installed_packages),]
#main installation logic
if(nrow(there)==0){
message("None installed")
}
else{
# list all packages already installed
for(i in 1:nrow(there)){
message(there[i,]$package," already installed")
}
if(nrow(missing)==0){
message(("Nothing to install"))
}
else{
#standardise source names
# fill bioconductor if source_type is empty
missing <- missing %>%
dplyr::mutate(source_type=tolower(source_type),
source_type=dplyr::case_when(
source_type=="gh"           ~ 'github',
source_type=="universe"     ~ 'r-universe',
source_type=="bioconductor" ~ 'bioc',
TRUE ~ source_type
)
)
# installing new packages
for(i in 1:nrow(missing)){
install_package(missing[i,]$package,missing[i,]$source,missing[i,]$url)
}
message("Task complete Goodbye!")
}
}
}
justinstall <- function(to_install){
# get list of installed packages
installed_packages  <- utils::installed.packages()[,1]
#determined which packages have been installed, which ones to install
there     <- to_install[to_install$package %in% installed_packages,]
missing   <- to_install[!(to_install$package %in% installed_packages),]
#main installation logic
if(nrow(there)==0){
message("None installed")
}
else{
# list all packages already installed
for(i in 1:nrow(there)){
message(there[i,]$package," already installed")
}
if(nrow(missing)==0){
message(("Nothing to install"))
}
else{
#standardise source names
# fill bioconductor if source_type is empty
missing <- missing %>%
dplyr::mutate(source_type=tolower(source_type),
source_type=dplyr::case_when(
source_type=="gh"           ~ 'github',
source_type=="universe"     ~ 'r-universe',
source_type=="bioconductor" ~ 'bioc',
TRUE ~ source_type
)
) %>%
dplyr::mutate(
source_param = dplyr::case_when(
source_type=="bioc" & source_param=="" ~ source_type,
TRUE ~ source_param
)
)
# installing new packages
for(i in 1:nrow(missing)){
install_package(missing[i,]$package,missing[i,]$source,missing[i,]$url)
}
message("Task complete Goodbye!")
}
}
}
library(here)
here:here()
here::here()
library(stringr)
str_remove(here(),"just.install")
to_install <- tibble::tribble(~package, ~source, ~url,
"fs",     "CRAN", "",
"ochRe",  "Github","ropenscilabs/ochRe",
"SummarizedExperiment","bioconductor","",
"lsr",    "bitbucker","djnavarro/lsr",
"covr","gitlab","jimhester/covr",
"customthemes","r-universe","https://carlosyanez.r-universe.dev",
"aussiemaps.data","local", str_c(str_remove(here(),"just.install"),"aussiemaps.data"))
justinstall(to_install)
renv::init()
to_install <- tibble::tribble(~package, ~source, ~url,
"fs",     "CRAN", "",
"here",    "CRAN","",
"stringr",  "CRAN",""
"ochRe",  "Github","ropenscilabs/ochRe",
"SummarizedExperiment","bioconductor","",
"lsr",    "bitbucker","djnavarro/lsr",
"covr","gitlab","jimhester/covr",
"customthemes","r-universe","https://carlosyanez.r-universe.dev",
"aussiemaps.data","local", string::str_c(stringr::str_remove(here::here(),"just.install"),"aussiemaps.data"))
to_install0 <- tibble::tribble(~package, ~source, ~url,
"here",    "CRAN","",
"stringr",  "CRAN","")
to_install <- tibble::tribble(~package, ~source, ~url,
"fs",     "CRAN", "",
"here",    "CRAN","",
"stringr",  "CRAN","",
"ochRe",  "Github","ropenscilabs/ochRe",
"SummarizedExperiment","bioconductor","",
"lsr",    "bitbucker","djnavarro/lsr",
"covr","gitlab","jimhester/covr",
"customthemes","r-universe","https://carlosyanez.r-universe.dev",
"aussiemaps.data","local", string::str_c(stringr::str_remove(here::here(),"just.install"),"aussiemaps.data"))
justinstall(to_install0)
justinstall(to_install)
usethis::use_gpl3_license()
pkgdown::build_site()
renv::snapshot()
