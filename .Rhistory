}
View(boxed_packages)
install.packages("metathis",repos = "https://gadenbuie.r-universe.dev")
just.install <- function(to_install){
installed_packages  <- rownames(installed.packages())
there <- to_install[to_install$package %in% installed_packages,]
missing   <- to_install[!(to_install$package %in% installed_packages),]
# these packages are already installed
for(i in 1:nrow(there)){
message(there[i,]$package," already installed")
}
# installing new packages
for(i in 1:nrow(missing)){
if (!(missing[i,]$package %in% installed_packages)) {
if(missing[i,]$repo %in% c("CRAN")){
install.packages(missing[i,]$package)                              # classic installation from CRAN
}else{
if(missing[i,]$repo %in% c("Bioc","Bioconductor","BioConductor")){
BiocManager::install(missing[i,]$package)                        # Bioconductor
}else{
if(missing[i,]$repo %in% c("Github","GitHub","github","gh")){
remotes::install_github(missing[i,]$url)                       #Github repository
else{
install.packages(missing[i,]$package,repos=missing[i,]$url) # minin-cran, r-universe style repo
}
}
}
}
}
}
# goodbye
message("Task done")
}
installed_packages  <- rownames(installed.packages())
there <- to_install[to_install$package %in% installed_packages,]
missing   <- to_install[!(to_install$package %in% installed_packages),]
# these packages are already installed
for(i in 1:nrow(there)){
message(there[i,]$package," already installed")
}
# installing new packages
for(i in 1:nrow(missing)){
if (!(missing[i,]$package %in% installed_packages)) {
if(missing[i,]$repo %in% c("CRAN")){
install.packages(missing[i,]$package)                              # classic installation from CRAN
}else{
if(missing[i,]$repo %in% c("Bioc","Bioconductor","BioConductor")){
BiocManager::install(missing[i,]$package)                        # Bioconductor
}else{
if(missing[i,]$repo %in% c("Github","GitHub","github","gh")){
remotes::install_github(missing[i,]$url)                       #Github repository
else{
install.packages(missing[i,]$package,repos=missing[i,]$url) # minin-cran, r-universe style repo
}
}
}
}
}
}
for(i in 1:nrow(missing)){
if(missing[i,]$repo %in% c("CRAN")){
install.packages(missing[i,]$package,repos="https://cloud.r-project.org/")  # classic installation from CRAN
}else{
if(missing[i,]$repo %in% c("Bioc","Bioconductor","BioConductor")){
BiocManager::install(missing[i,]$package)                                # Bioconductor
}else{
if(missing[i,]$repo %in% c("Github","GitHub","github","gh")){
remotes::install_github(missing[i,]$url)                               #Github repository
else{
install.packages(missing[i,]$package,repos=missing[i,]$url)          # minin-cran, r-universe style repo
}
}
}
}
}
just_install <- tibble::tribble(~package,       ~source,~url,
"librarian",    "Github","DesiQuintans/librarian",
"box",          "CRAN","",
"randomForest", "CRAN","",    # for RandomForest
"LiblineaR",    "CRAN","",    # for linear SVM
"rpart",        "CRAN","",    # for decision trees
"rpart.plot",   "CRAN","",    # plotting decision trees
"kknn",         "CRAN","",    # For KNN
"doParallel",   "CRAN","",    # enable parallel processing with tidymodels
"progressr",     "CRAN",""    # progress bar
)
for(i in 1:nrow(missing)){
if(missing[i,]$repo %in% c("CRAN")){
install.packages(missing[i,]$package,repos="https://cloud.r-project.org/")  # classic installation from CRAN
}else{
if(missing[i,]$repo %in% c("Bioc","Bioconductor","BioConductor")){
BiocManager::install(missing[i,]$package)                                # Bioconductor
}else{
if(missing[i,]$repo %in% c("Github","GitHub","github","gh")){
remotes::install_github(missing[i,]$url)                               #Github repository
else{
install.packages(missing[i,]$package,repos=missing[i,]$url)          # minin-cran, r-universe style repo
}
}
}
}
}
for(i in 1:nrow(missing)){
if(missing[i,]$repo %in% c("CRAN")){
install.packages(missing[i,]$package,repos="https://cloud.r-project.org/")  # classic installation from CRAN
}else{
if(missing[i,]$repo %in% c("Bioc","Bioconductor","BioConductor")){
BiocManager::install(missing[i,]$package)                                # Bioconductor
}else{
if(missing[i,]$repo %in% c("Github","GitHub","github","gh")){
remotes::install_github(missing[i,]$url)                               #Github repository
else{
install.packages(missing[i,]$package,repos=missing[i,]$url)          # minin-cran, r-universe style repo
}
}
}
}
}
installed_packages  <- rownames(installed.packages())
there <- to_install[to_install$package %in% installed_packages,]
missing   <- to_install[!(to_install$package %in% installed_packages),]
View(to_install)
to_install <- tibble::tribble(~package,       ~source,~url,
"librarian",    "Github","DesiQuintans/librarian",
"box",          "CRAN","",
"randomForest", "CRAN","",    # for RandomForest
"LiblineaR",    "CRAN","",    # for linear SVM
"rpart",        "CRAN","",    # for decision trees
"rpart.plot",   "CRAN","",    # plotting decision trees
"kknn",         "CRAN","",    # For KNN
"doParallel",   "CRAN","",    # enable parallel processing with tidymodels
"progressr",     "CRAN",""    # progress bar
)
View(to_install)
to_install <- tibble::tribble(~package,       ~source,~url,
"librarian",    "Github","DesiQuintans/librarian",
"box",          "CRAN","",
"randomForest", "CRAN","",    # for RandomForest
"LiblineaR",    "CRAN","",    # for linear SVM
"rpart",        "CRAN","",    # for decision trees
"rpart.plot",   "CRAN","",    # plotting decision trees
"kknn",         "CRAN","",    # For KNN
"doParallel",   "CRAN","",    # enable parallel processing with tidymodels
"progressr",     "CRAN",""    # progress bar,
)
just_install <-tibble::tribble(~package,       ~source,~url,
"librarian",    "Github","DesiQuintans/librarian",
"box",          "CRAN","",
"randomForest", "CRAN","",    # for RandomForest
"LiblineaR",    "CRAN","",    # for linear SVM
"rpart",        "CRAN","",    # for decision trees
"rpart.plot",   "CRAN","",    # plotting decision trees
"kknn",         "CRAN","",    # For KNN
"doParallel",   "CRAN","",    # enable parallel processing with tidymodels
"progressr",     "CRAN","",    # progress bar
"metathis",      "Other","https://gadenbuie.r-universe.dev",
"airway",        "Bioconductor",""
)
View(just_install)
installed_packages  <- rownames(installed.packages())
there <- to_install[to_install$package %in% installed_packages,]
missing   <- to_install[!(to_install$package %in% installed_packages),]
just_install <-tibble::tribble(~package,       ~source,~url,
"librarian",    "Github","DesiQuintans/librarian",
"box",          "CRAN","",
"randomForest", "CRAN","",    # for RandomForest
"LiblineaR",    "CRAN","",    # for linear SVM
"rpart",        "CRAN","",    # for decision trees
"rpart.plot",   "CRAN","",    # plotting decision trees
"kknn",         "CRAN","",    # For KNN
"doParallel",   "CRAN","",    # enable parallel processing with tidymodels
"progressr",     "CRAN","",    # progress bar
"metathis",      "Other","https://gadenbuie.r-universe.dev",
"airway",        "Bioconductor",""
)
installed_packages  <- rownames(installed.packages())
there <- to_install[to_install$package %in% installed_packages,]
to_install <-tibble::tribble(~package,       ~source,~url,
"librarian",    "Github","DesiQuintans/librarian",
"box",          "CRAN","",
"randomForest", "CRAN","",    # for RandomForest
"LiblineaR",    "CRAN","",    # for linear SVM
"rpart",        "CRAN","",    # for decision trees
"rpart.plot",   "CRAN","",    # plotting decision trees
"kknn",         "CRAN","",    # For KNN
"doParallel",   "CRAN","",    # enable parallel processing with tidymodels
"progressr",     "CRAN","",    # progress bar
"metathis",      "Other","https://gadenbuie.r-universe.dev",
"airway",        "Bioconductor",""
)
to_install <-tibble::tribble(~package,       ~source,~url,
"librarian",    "Github","DesiQuintans/librarian",
"box",          "CRAN","",
"randomForest", "CRAN","",    # for RandomForest
"LiblineaR",    "CRAN","",    # for linear SVM
"rpart",        "CRAN","",    # for decision trees
"rpart.plot",   "CRAN","",    # plotting decision trees
"kknn",         "CRAN","",    # For KNN
"doParallel",   "CRAN","",    # enable parallel processing with tidymodels
"progressr",     "CRAN","",    # progress bar
"metathis",      "Other","https://gadenbuie.r-universe.dev",
"airway",        "Bioconductor",""
)
just.install <- function(to_install){
installed_packages  <- rownames(installed.packages())
there <- to_install[to_install$package %in% installed_packages,]
missing   <- to_install[!(to_install$package %in% installed_packages),]
# these packages are already installed
for(i in 1:nrow(there)){
message(there[i,]$package," already installed")
}
# installing new packages
for(i in 1:nrow(missing)){
if(missing[i,]$repo %in% c("CRAN")){
install.packages(missing[i,]$package,repos="https://cloud.r-project.org/")  # classic installation from CRAN
}else{
if(missing[i,]$repo %in% c("Bioc","Bioconductor","BioConductor")){
BiocManager::install(missing[i,]$package)                                # Bioconductor
}else{
if(missing[i,]$repo %in% c("Github","GitHub","github","gh")){
remotes::install_github(missing[i,]$url)                               #Github repository
else{
install.packages(missing[i,]$package,repos=missing[i,]$url)          # minin-cran, r-universe style repo
}
}
}
}
}
# goodbye
message("Task done")
}
installed_packages  <- rownames(installed.packages())
there <- to_install[to_install$package %in% installed_packages,]
missing   <- to_install[!(to_install$package %in% installed_packages),]
# these packages are already installed
for(i in 1:nrow(there)){
message(there[i,]$package," already installed")
}
# installing new packages
for(i in 1:nrow(missing)){
if(missing[i,]$repo %in% c("CRAN")){
install.packages(missing[i,]$package,repos="https://cloud.r-project.org/")  # classic installation from CRAN
}else{
if(missing[i,]$repo %in% c("Bioc","Bioconductor","BioConductor")){
BiocManager::install(missing[i,]$package)                                # Bioconductor
}else{
if(missing[i,]$repo %in% c("Github","GitHub","github","gh")){
remotes::install_github(missing[i,]$url)                               #Github repository
else{
install.packages(missing[i,]$package,repos=missing[i,]$url)          # minin-cran, r-universe style repo
}
}
}
}
}
i <-1
install.packages(missing[i,]$package,repos="https://cloud.r-project.org/")  # classic installation from CRAN
if(missing[i,]$repo %in% c("CRAN")){
install.packages(missing[i,]$package,repos="https://cloud.r-project.org/")  # classic installation from CRAN
}
if(missing[i,]$source %in% c("CRAN")){
install.packages(missing[i,]$package,repos="https://cloud.r-project.org/")  # classic installation from CRAN
}
if(missing[i,]$source %in% c("CRAN")){
install.packages(missing[i,]$package,repos="https://cloud.r-project.org/")  # classic installation from CRAN
}else{
if(missing[i,]$source %in% c("Bioc","Bioconductor","BioConductor")){
BiocManager::install(missing[i,]$package)                                # Bioconductor
}else{
if(missing[i,]$source %in% c("Github","GitHub","github","gh")){
remotes::install_github(missing[i,]$url)                               #Github repository
else{
install.packages(missing[i,]$package,repos=missing[i,]$url)          # mini-cran, r-universe style repo
}
}
}
}
for(i in 1:nrow(missing)){
if(missing[i,]$source %in% c("CRAN")){
install.packages(missing[i,]$package,repos="https://cloud.r-project.org/")  # classic installation from CRAN
}else{
if(missing[i,]$source %in% c("Bioc","Bioconductor","BioConductor")){
BiocManager::install(missing[i,]$package)                                # Bioconductor
}else{
if(missing[i,]$source %in% c("Github","GitHub","github","gh")){
remotes::install_github(missing[i,]$url)                               #Github repository
}else{
install.packages(missing[i,]$package,repos=missing[i,]$url)          # mini-cran, r-universe style repo
}
}
}
}
just.install <- function(to_install){
installed_packages  <- rownames(installed.packages())
there <- to_install[to_install$package %in% installed_packages,]
missing   <- to_install[!(to_install$package %in% installed_packages),]
# these packages are already installed
for(i in 1:nrow(there)){
message(there[i,]$package," already installed")
}
# installing new packages
for(i in 1:nrow(missing)){
if(missing[i,]$source %in% c("CRAN")){
install.packages(missing[i,]$package,repos="https://cloud.r-project.org/")  # classic installation from CRAN
}else{
if(missing[i,]$source %in% c("Bioc","Bioconductor","BioConductor")){
BiocManager::install(missing[i,]$package)                                # Bioconductor
}else{
if(missing[i,]$source %in% c("Github","GitHub","github","gh")){
remotes::install_github(missing[i,]$url)                               #Github repository
}else{
install.packages(missing[i,]$package,repos=missing[i,]$url)          # mini-cran, r-universe style repo
}
}
}
}
# goodbye
message("Task done")
}
just.install(to_install)
View(missing)
remove.packages(metathis)
remove.packages("metathis")
just.install(to_install)
library(just.install)
to_install <-tibble::tribble(~package,       ~source,~url,
"librarian",    "Github","DesiQuintans/librarian",
"box",          "CRAN","",
"randomForest", "CRAN","",    # for RandomForest
"LiblineaR",    "CRAN","",    # for linear SVM
"rpart",        "CRAN","",    # for decision trees
"rpart.plot",   "CRAN","",    # plotting decision trees
"kknn",         "CRAN","",    # For KNN
"doParallel",   "CRAN","",    # enable parallel processing with tidymodels
"progressr",     "CRAN","",    # progress bar
"metathis",      "Other","https://gadenbuie.r-universe.dev",
"airway",        "Bioconductor",""
)
just.install(to_install)
just.install(to_install)
library(just.install)
library(just.install)
?just_install
?install_github
?install
cran_repo="https://cloud.r-project.org/"
to_install <- tibble::tribble(~package,                   ~source,   ~url,
"librarian",                "Github",    "DesiQuintans/librarian",             # used to attach tidyverse, optional
"box",                      "CRAN",      "",                                   # used to attach all other packages
"tidyverse",                "CRAN",      "",                                   # the tidyverse
"here",                     "CRAN",      "",                                   # project aware replacement for file.path()
"fs",                       "CRAN",      "",                                   # cross-OS file operations
"knitr",                    "CRAN",      "",                                   # make sure knitr is installed
"customthemes",             "r-universe","https://carlosyanez.r-universe.dev", #custom theme package
"uofgdataanalyticsreport",  "r-universe","https://carlosyanez.r-universe.dev"  #this template
)
installed_packages  <- rownames(installed.packages())
there <- to_install[to_install$package %in% installed_packages,]
missing   <- to_install[!(to_install$package %in% installed_packages),]
# these packages are already installed
for(i in 1:nrow(there)){
message(there[i,]$package," already installed")
}
crans <-  c("CRAN","miniCRAN","r-universe")
missing %>%
mutate(url=if_else(url=="",cran_repo,"")) %>%
filter(source %in% crans) %>%
select(url) %>%
distinct() %>%
pull(url)
library(magrittr)
missing %>%
mutate(url=if_else(url=="",cran_repo,"")) %>%
filter(source %in% crans) %>%
select(url) %>%
distinct() %>%
pull(url)
library(tidyverse)
missing %>%
mutate(url=if_else(url=="",cran_repo,"")) %>%
filter(source %in% crans) %>%
select(url) %>%
distinct() %>%
pull(url)
missing %>%
mutate(url=if_else(url=="",cran_repo,"")) %>%
filter(source %in% crans) %>%
select(url) %>%
distinct() %>%
pull(url)
missing %>%
mutate(url=if_else(url=="",cran_repo,"")) %>%
filter(source %in% crans) %>%
select(url) %>%
distinct() %>%
pull(url)
missing %>%
mutate(url=if_else(url=="",cran_repo,"")) %>%
filter(source %in% crans) %>%
select(url) %>%
distinct() %>%
pull(url)
cran_repo="https://www.stats.bris.ac.uk/R/"
missing %>%
mutate(url=if_else(url=="",cran_repo,"")) %>%
filter(source %in% crans) %>%
select(url) %>%
distinct() %>%
pull(url)
missing %>%
mutate(url=if_else(url=="",cran_repo)) %>%
filter(source %in% crans) %>%
select(url) %>%
distinct() %>%
pull(url)
missing %>%
mutate(url=if_else(url=="",cran_repo)) %>%
filter(source %in% crans) %>%
select(url) %>%
distinct() %>%
pull(url)
missing %>%
mutate(url=if_else(url=="",cran_repo,url)) %>%
filter(source %in% crans) %>%
select(url) %>%
distinct() %>%
pull(url)
missing %>%
mutate(url=if_else(url=="",cran_repo,url)) %>%
filter(source %in% crans) %>%
select(url) %>%
distinct() %>%
pull(url)
missing %>%
mutate(url=if_else(url=="",cran_repo,url)) %>%
filter(source %in% crans) %>%
select(url) %>%
distinct() %>%
pull(url)
options(repos = cran_repos)
cran_repos <- missing %>%
mutate(url=if_else(url=="",cran_repo,url)) %>%
filter(source %in% crans) %>%
select(url) %>%
distinct() %>%
pull(url)
options(repos = cran_repos)
for(i in 1:nrow(missing)){
if(missing[i,]$source %in% crans){
install.packages(missing[i,]$package,dependencies=TRUE)  # classic installation from CRAN
}else{
if(missing[i,]$source %in% c("Bioc","Bioconductor","BioConductor")){
BiocManager::install(missing[i,]$package,dependencies = TRUE)                                # Bioconductor
}else{
if(missing[i,]$source %in% c("Github","GitHub","github","gh")){
remotes::install_github(missing[i,]$url,dependencies = TRUE)                               #Github repository
}else{
if(missing[i,]$source %in% c("mini-cran","r-universe")){
message("installing ",missing[i,]$package)
install.packages(missing[i,]$package,repos=missing[i,]$url,dependencies = TRUE)          # mini-cran, r-universe style repo
}else{message("I don't know how to install ",missing[i,]$package)}
}
}
}
}
}
dependencies <- unlist(tools::package_dependencies(to_install$package))
missing_deps <- dependencies[!(dependencies %in% installed_packages),]
missing_deps <- dependencies[!(dependencies %in% installed_packages),]
dependencies
dependencies %in% installed_packages
missing_deps <- dependencies[!(dependencies %in% installed_packages)]
if(length(missing_deps)==0){
message("no missing dependencies")
}else{
message("installing dependencies: ", missing_deps)
install.packages(missing_deps,dependencies=TRUE)
message("dependencies installed")
}
library(just.install)
boxed_packages <- tibble::tribble(~package,                   ~source,   ~url,
"librarian",                "Github",    "DesiQuintans/librarian",             # used to attach tidyverse, optional
"box",                      "CRAN",      "",                                   # used to attach all other packages
"tidyverse",                "CRAN",      "",                                   # the tidyverse
"here",                     "CRAN",      "",                                   # project aware replacement for file.path()
"fs",                       "CRAN",      "",                                   # cross-OS file operations
"knitr",                    "CRAN",      "",                                   # make sure knitr is installed
"customthemes",             "r-universe","https://carlosyanez.r-universe.dev", #custom theme package
"uofgdataanalyticsreport",  "r-universe","https://carlosyanez.r-universe.dev"  #this template
)
just.install::justinstall(boxed_packages)
library(just.install)
boxed_packages <- tibble::tribble(~package,                   ~source,   ~url,
"librarian",                "Github",    "DesiQuintans/librarian",             # used to attach tidyverse, optional
"box",                      "CRAN",      "",                                   # used to attach all other packages
"tidyverse",                "CRAN",      "",                                   # the tidyverse
"here",                     "CRAN",      "",                                   # project aware replacement for file.path()
"fs",                       "CRAN",      "",                                   # cross-OS file operations
"knitr",                    "CRAN",      "",                                   # make sure knitr is installed
"customthemes",             "r-universe","https://carlosyanez.r-universe.dev", #custom theme package
"uofgdataanalyticsreport",  "r-universe","https://carlosyanez.r-universe.dev"  #this template
)
just.install::justinstall(boxed_packages)
remove.packages("ggtext")
library(just.install)
library(just.install)
just.install::justinstall(boxed_packages)
?package_dependencies
library(just.install)
library(just.install)
library(just.install)
usethis::use_vignette("my-vignette")
