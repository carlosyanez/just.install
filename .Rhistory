"progressr",     "CRAN",""    # progress bar
)
View(to_install)
to_install <- tibble::tribble(~package,       ~source,~url,
"librarian",    "Github","DesiQuintans/librarian",
"box",          "CRAN","",
"randomForest", "CRAN","",    # for RandomForest
"LiblineaR",    "CRAN","",    # for linear SVM
"rpart",        "CRAN","",    # for decision trees
"rpart.plot",   "CRAN","",    # plotting decision trees
"kknn",         "CRAN","",    # For KNN
"doParallel",   "CRAN","",    # enable parallel processing with tidymodels
"progressr",     "CRAN",""    # progress bar,
)
just_install <-tibble::tribble(~package,       ~source,~url,
"librarian",    "Github","DesiQuintans/librarian",
"box",          "CRAN","",
"randomForest", "CRAN","",    # for RandomForest
"LiblineaR",    "CRAN","",    # for linear SVM
"rpart",        "CRAN","",    # for decision trees
"rpart.plot",   "CRAN","",    # plotting decision trees
"kknn",         "CRAN","",    # For KNN
"doParallel",   "CRAN","",    # enable parallel processing with tidymodels
"progressr",     "CRAN","",    # progress bar
"metathis",      "Other","https://gadenbuie.r-universe.dev",
"airway",        "Bioconductor",""
)
View(just_install)
installed_packages  <- rownames(installed.packages())
there <- to_install[to_install$package %in% installed_packages,]
missing   <- to_install[!(to_install$package %in% installed_packages),]
just_install <-tibble::tribble(~package,       ~source,~url,
"librarian",    "Github","DesiQuintans/librarian",
"box",          "CRAN","",
"randomForest", "CRAN","",    # for RandomForest
"LiblineaR",    "CRAN","",    # for linear SVM
"rpart",        "CRAN","",    # for decision trees
"rpart.plot",   "CRAN","",    # plotting decision trees
"kknn",         "CRAN","",    # For KNN
"doParallel",   "CRAN","",    # enable parallel processing with tidymodels
"progressr",     "CRAN","",    # progress bar
"metathis",      "Other","https://gadenbuie.r-universe.dev",
"airway",        "Bioconductor",""
)
installed_packages  <- rownames(installed.packages())
there <- to_install[to_install$package %in% installed_packages,]
to_install <-tibble::tribble(~package,       ~source,~url,
"librarian",    "Github","DesiQuintans/librarian",
"box",          "CRAN","",
"randomForest", "CRAN","",    # for RandomForest
"LiblineaR",    "CRAN","",    # for linear SVM
"rpart",        "CRAN","",    # for decision trees
"rpart.plot",   "CRAN","",    # plotting decision trees
"kknn",         "CRAN","",    # For KNN
"doParallel",   "CRAN","",    # enable parallel processing with tidymodels
"progressr",     "CRAN","",    # progress bar
"metathis",      "Other","https://gadenbuie.r-universe.dev",
"airway",        "Bioconductor",""
)
to_install <-tibble::tribble(~package,       ~source,~url,
"librarian",    "Github","DesiQuintans/librarian",
"box",          "CRAN","",
"randomForest", "CRAN","",    # for RandomForest
"LiblineaR",    "CRAN","",    # for linear SVM
"rpart",        "CRAN","",    # for decision trees
"rpart.plot",   "CRAN","",    # plotting decision trees
"kknn",         "CRAN","",    # For KNN
"doParallel",   "CRAN","",    # enable parallel processing with tidymodels
"progressr",     "CRAN","",    # progress bar
"metathis",      "Other","https://gadenbuie.r-universe.dev",
"airway",        "Bioconductor",""
)
just.install <- function(to_install){
installed_packages  <- rownames(installed.packages())
there <- to_install[to_install$package %in% installed_packages,]
missing   <- to_install[!(to_install$package %in% installed_packages),]
# these packages are already installed
for(i in 1:nrow(there)){
message(there[i,]$package," already installed")
}
# installing new packages
for(i in 1:nrow(missing)){
if(missing[i,]$repo %in% c("CRAN")){
install.packages(missing[i,]$package,repos="https://cloud.r-project.org/")  # classic installation from CRAN
}else{
if(missing[i,]$repo %in% c("Bioc","Bioconductor","BioConductor")){
BiocManager::install(missing[i,]$package)                                # Bioconductor
}else{
if(missing[i,]$repo %in% c("Github","GitHub","github","gh")){
remotes::install_github(missing[i,]$url)                               #Github repository
else{
install.packages(missing[i,]$package,repos=missing[i,]$url)          # minin-cran, r-universe style repo
}
}
}
}
}
# goodbye
message("Task done")
}
installed_packages  <- rownames(installed.packages())
there <- to_install[to_install$package %in% installed_packages,]
missing   <- to_install[!(to_install$package %in% installed_packages),]
# these packages are already installed
for(i in 1:nrow(there)){
message(there[i,]$package," already installed")
}
# installing new packages
for(i in 1:nrow(missing)){
if(missing[i,]$repo %in% c("CRAN")){
install.packages(missing[i,]$package,repos="https://cloud.r-project.org/")  # classic installation from CRAN
}else{
if(missing[i,]$repo %in% c("Bioc","Bioconductor","BioConductor")){
BiocManager::install(missing[i,]$package)                                # Bioconductor
}else{
if(missing[i,]$repo %in% c("Github","GitHub","github","gh")){
remotes::install_github(missing[i,]$url)                               #Github repository
else{
install.packages(missing[i,]$package,repos=missing[i,]$url)          # minin-cran, r-universe style repo
}
}
}
}
}
i <-1
install.packages(missing[i,]$package,repos="https://cloud.r-project.org/")  # classic installation from CRAN
if(missing[i,]$repo %in% c("CRAN")){
install.packages(missing[i,]$package,repos="https://cloud.r-project.org/")  # classic installation from CRAN
}
if(missing[i,]$source %in% c("CRAN")){
install.packages(missing[i,]$package,repos="https://cloud.r-project.org/")  # classic installation from CRAN
}
if(missing[i,]$source %in% c("CRAN")){
install.packages(missing[i,]$package,repos="https://cloud.r-project.org/")  # classic installation from CRAN
}else{
if(missing[i,]$source %in% c("Bioc","Bioconductor","BioConductor")){
BiocManager::install(missing[i,]$package)                                # Bioconductor
}else{
if(missing[i,]$source %in% c("Github","GitHub","github","gh")){
remotes::install_github(missing[i,]$url)                               #Github repository
else{
install.packages(missing[i,]$package,repos=missing[i,]$url)          # mini-cran, r-universe style repo
}
}
}
}
for(i in 1:nrow(missing)){
if(missing[i,]$source %in% c("CRAN")){
install.packages(missing[i,]$package,repos="https://cloud.r-project.org/")  # classic installation from CRAN
}else{
if(missing[i,]$source %in% c("Bioc","Bioconductor","BioConductor")){
BiocManager::install(missing[i,]$package)                                # Bioconductor
}else{
if(missing[i,]$source %in% c("Github","GitHub","github","gh")){
remotes::install_github(missing[i,]$url)                               #Github repository
}else{
install.packages(missing[i,]$package,repos=missing[i,]$url)          # mini-cran, r-universe style repo
}
}
}
}
just.install <- function(to_install){
installed_packages  <- rownames(installed.packages())
there <- to_install[to_install$package %in% installed_packages,]
missing   <- to_install[!(to_install$package %in% installed_packages),]
# these packages are already installed
for(i in 1:nrow(there)){
message(there[i,]$package," already installed")
}
# installing new packages
for(i in 1:nrow(missing)){
if(missing[i,]$source %in% c("CRAN")){
install.packages(missing[i,]$package,repos="https://cloud.r-project.org/")  # classic installation from CRAN
}else{
if(missing[i,]$source %in% c("Bioc","Bioconductor","BioConductor")){
BiocManager::install(missing[i,]$package)                                # Bioconductor
}else{
if(missing[i,]$source %in% c("Github","GitHub","github","gh")){
remotes::install_github(missing[i,]$url)                               #Github repository
}else{
install.packages(missing[i,]$package,repos=missing[i,]$url)          # mini-cran, r-universe style repo
}
}
}
}
# goodbye
message("Task done")
}
just.install(to_install)
View(missing)
remove.packages(metathis)
remove.packages("metathis")
just.install(to_install)
library(just.install)
to_install <-tibble::tribble(~package,       ~source,~url,
"librarian",    "Github","DesiQuintans/librarian",
"box",          "CRAN","",
"randomForest", "CRAN","",    # for RandomForest
"LiblineaR",    "CRAN","",    # for linear SVM
"rpart",        "CRAN","",    # for decision trees
"rpart.plot",   "CRAN","",    # plotting decision trees
"kknn",         "CRAN","",    # For KNN
"doParallel",   "CRAN","",    # enable parallel processing with tidymodels
"progressr",     "CRAN","",    # progress bar
"metathis",      "Other","https://gadenbuie.r-universe.dev",
"airway",        "Bioconductor",""
)
just.install(to_install)
just.install(to_install)
library(just.install)
library(just.install)
?just_install
?install_github
?install
cran_repo="https://cloud.r-project.org/"
to_install <- tibble::tribble(~package,                   ~source,   ~url,
"librarian",                "Github",    "DesiQuintans/librarian",             # used to attach tidyverse, optional
"box",                      "CRAN",      "",                                   # used to attach all other packages
"tidyverse",                "CRAN",      "",                                   # the tidyverse
"here",                     "CRAN",      "",                                   # project aware replacement for file.path()
"fs",                       "CRAN",      "",                                   # cross-OS file operations
"knitr",                    "CRAN",      "",                                   # make sure knitr is installed
"customthemes",             "r-universe","https://carlosyanez.r-universe.dev", #custom theme package
"uofgdataanalyticsreport",  "r-universe","https://carlosyanez.r-universe.dev"  #this template
)
installed_packages  <- rownames(installed.packages())
there <- to_install[to_install$package %in% installed_packages,]
missing   <- to_install[!(to_install$package %in% installed_packages),]
# these packages are already installed
for(i in 1:nrow(there)){
message(there[i,]$package," already installed")
}
crans <-  c("CRAN","miniCRAN","r-universe")
missing %>%
mutate(url=if_else(url=="",cran_repo,"")) %>%
filter(source %in% crans) %>%
select(url) %>%
distinct() %>%
pull(url)
library(magrittr)
missing %>%
mutate(url=if_else(url=="",cran_repo,"")) %>%
filter(source %in% crans) %>%
select(url) %>%
distinct() %>%
pull(url)
library(tidyverse)
missing %>%
mutate(url=if_else(url=="",cran_repo,"")) %>%
filter(source %in% crans) %>%
select(url) %>%
distinct() %>%
pull(url)
missing %>%
mutate(url=if_else(url=="",cran_repo,"")) %>%
filter(source %in% crans) %>%
select(url) %>%
distinct() %>%
pull(url)
missing %>%
mutate(url=if_else(url=="",cran_repo,"")) %>%
filter(source %in% crans) %>%
select(url) %>%
distinct() %>%
pull(url)
missing %>%
mutate(url=if_else(url=="",cran_repo,"")) %>%
filter(source %in% crans) %>%
select(url) %>%
distinct() %>%
pull(url)
cran_repo="https://www.stats.bris.ac.uk/R/"
missing %>%
mutate(url=if_else(url=="",cran_repo,"")) %>%
filter(source %in% crans) %>%
select(url) %>%
distinct() %>%
pull(url)
missing %>%
mutate(url=if_else(url=="",cran_repo)) %>%
filter(source %in% crans) %>%
select(url) %>%
distinct() %>%
pull(url)
missing %>%
mutate(url=if_else(url=="",cran_repo)) %>%
filter(source %in% crans) %>%
select(url) %>%
distinct() %>%
pull(url)
missing %>%
mutate(url=if_else(url=="",cran_repo,url)) %>%
filter(source %in% crans) %>%
select(url) %>%
distinct() %>%
pull(url)
missing %>%
mutate(url=if_else(url=="",cran_repo,url)) %>%
filter(source %in% crans) %>%
select(url) %>%
distinct() %>%
pull(url)
missing %>%
mutate(url=if_else(url=="",cran_repo,url)) %>%
filter(source %in% crans) %>%
select(url) %>%
distinct() %>%
pull(url)
options(repos = cran_repos)
cran_repos <- missing %>%
mutate(url=if_else(url=="",cran_repo,url)) %>%
filter(source %in% crans) %>%
select(url) %>%
distinct() %>%
pull(url)
options(repos = cran_repos)
for(i in 1:nrow(missing)){
if(missing[i,]$source %in% crans){
install.packages(missing[i,]$package,dependencies=TRUE)  # classic installation from CRAN
}else{
if(missing[i,]$source %in% c("Bioc","Bioconductor","BioConductor")){
BiocManager::install(missing[i,]$package,dependencies = TRUE)                                # Bioconductor
}else{
if(missing[i,]$source %in% c("Github","GitHub","github","gh")){
remotes::install_github(missing[i,]$url,dependencies = TRUE)                               #Github repository
}else{
if(missing[i,]$source %in% c("mini-cran","r-universe")){
message("installing ",missing[i,]$package)
install.packages(missing[i,]$package,repos=missing[i,]$url,dependencies = TRUE)          # mini-cran, r-universe style repo
}else{message("I don't know how to install ",missing[i,]$package)}
}
}
}
}
}
dependencies <- unlist(tools::package_dependencies(to_install$package))
missing_deps <- dependencies[!(dependencies %in% installed_packages),]
missing_deps <- dependencies[!(dependencies %in% installed_packages),]
dependencies
dependencies %in% installed_packages
missing_deps <- dependencies[!(dependencies %in% installed_packages)]
if(length(missing_deps)==0){
message("no missing dependencies")
}else{
message("installing dependencies: ", missing_deps)
install.packages(missing_deps,dependencies=TRUE)
message("dependencies installed")
}
library(just.install)
boxed_packages <- tibble::tribble(~package,                   ~source,   ~url,
"librarian",                "Github",    "DesiQuintans/librarian",             # used to attach tidyverse, optional
"box",                      "CRAN",      "",                                   # used to attach all other packages
"tidyverse",                "CRAN",      "",                                   # the tidyverse
"here",                     "CRAN",      "",                                   # project aware replacement for file.path()
"fs",                       "CRAN",      "",                                   # cross-OS file operations
"knitr",                    "CRAN",      "",                                   # make sure knitr is installed
"customthemes",             "r-universe","https://carlosyanez.r-universe.dev", #custom theme package
"uofgdataanalyticsreport",  "r-universe","https://carlosyanez.r-universe.dev"  #this template
)
just.install::justinstall(boxed_packages)
library(just.install)
boxed_packages <- tibble::tribble(~package,                   ~source,   ~url,
"librarian",                "Github",    "DesiQuintans/librarian",             # used to attach tidyverse, optional
"box",                      "CRAN",      "",                                   # used to attach all other packages
"tidyverse",                "CRAN",      "",                                   # the tidyverse
"here",                     "CRAN",      "",                                   # project aware replacement for file.path()
"fs",                       "CRAN",      "",                                   # cross-OS file operations
"knitr",                    "CRAN",      "",                                   # make sure knitr is installed
"customthemes",             "r-universe","https://carlosyanez.r-universe.dev", #custom theme package
"uofgdataanalyticsreport",  "r-universe","https://carlosyanez.r-universe.dev"  #this template
)
just.install::justinstall(boxed_packages)
remove.packages("ggtext")
library(just.install)
library(just.install)
just.install::justinstall(boxed_packages)
?package_dependencies
library(just.install)
library(just.install)
library(just.install)
usethis::use_vignette("my-vignette")
# make sure that {librarian} and is there
if(!require(librarian)) install.packages("librarian")
librarian::shelf("tidyverse",
"here",
"ggtext",
"ggfx",
"hexSticker",
"png",
"magick",                   #for twitter card
"dmi3kno/bunny"             #helper for magick
)
#https://www.reshot.com/free-svg-icons/item/download-6CWHK4RJU2/
ds_logo <- image_read(here("hex","logo.png"))
height <- 1.2
s <- sticker(ds_logo, package="Reports", p_size=20, p_x=1, p_y=0.75,
s_x=1,s_y=1.1,
s_width=1.3*height, s_height=height,
p_color="black",
h_color="#9a517c", h_fill="white",
filename=here("img","hexSticker.png"))
s <- sticker(ds_logo, package="just install!", p_size=20, p_x=1, p_y=0.5,
s_x=1,s_y=1.1,
s_width=1.3*height, s_height=height,
p_color="black",
h_color="#9a517c", h_fill="white",
filename=here("img","hexSticker.png"))
s <- sticker(ds_logo, package="just install!", p_size=18, p_x=1, p_y=0.55,
s_x=1,s_y=1.1,
s_width=1.3*height, s_height=height,
p_color="black",
h_color="#9a517c", h_fill="white",
filename=here("img","hexSticker.png"))
s <- sticker(ds_logo, package="just install!", p_size=18, p_x=1, p_y=0.55,
s_x=1,s_y=1.1,
s_width=1.3*height, s_height=height,
p_color="black",
h_color="black", h_fill="white",
filename=here("img","hexSticker.png"))
s <- sticker(ds_logo, package="just install!", p_size=18, p_x=1, p_y=0.55,
s_x=1,s_y=1.1,
s_width=1.3*height, s_height=height,
p_color="black",
h_color="black", h_fill="white",
filename=here("img","hexSticker.png"))
librarian::shelf("tidyverse",
"here",
"ggtext",
"ggfx",
"hexSticker",
"png",
"magick",                   #for twitter card
"dmi3kno/bunny"             #helper for magick
)
height <- 1
s <- sticker(ds_logo, package="just install!", p_size=18, p_x=1, p_y=0.55,
s_x=1,s_y=1.1,
s_width=1.3*height, s_height=height,
p_color="black",
h_color="black", h_fill="white",
filename=here("img","hexSticker.png"))
# https://www.pngfind.com/download/hobbwm_github-clipart-github-logo-cartoon-hd-png-download/
gh_logo <- image_read(here("hex","gh.png")) %>%
image_scale("50x50")
bg_colour <-"white"
gh <- image_canvas_ghcard(bg_colour) %>%
image_compose(img_hex_gh, gravity = "East", offset = "+100+0") %>%
image_annotate("just install", gravity = "West", location = "+100-30",
color="black", size=40, font="Aller", weight = 700) %>%
image_compose(gh_logo, gravity="West", offset = "+100+40") %>%
image_annotate("carlosyanez/just.install", gravity="West", location="+160+45",
size=30, font="Ubuntu Mono",color="black") %>%
image_border_ghcard(bg_colour)
img_hex_gh <- image_read(here("img","hexSticker.png")) %>%
image_scale("400x400")
gh <- image_canvas_ghcard(bg_colour) %>%
image_compose(img_hex_gh, gravity = "East", offset = "+100+0") %>%
image_annotate("just install", gravity = "West", location = "+100-30",
color="black", size=40, font="Aller", weight = 700) %>%
image_compose(gh_logo, gravity="West", offset = "+100+40") %>%
image_annotate("carlosyanez/just.install", gravity="West", location="+160+45",
size=30, font="Ubuntu Mono",color="black") %>%
image_border_ghcard(bg_colour)
gh %>%
image_write(here::here("img", "bbox_ghcard.png"))
gh <- image_canvas_ghcard(bg_colour) %>%
image_compose(img_hex_gh, gravity = "East", offset = "+100+0") %>%
image_annotate("just install", gravity = "West", location = "+100-30",
color="black", size=60, font="Aller", weight = 700) %>%
image_compose(gh_logo, gravity="West", offset = "+100+40") %>%
image_annotate("carlosyanez/just.install", gravity="West", location="+160+45",
size=50, font="Ubuntu Mono",color="black") %>%
image_border_ghcard(bg_colour)
gh %>%
image_write(here::here("img", "bbox_ghcard.png"))
usethis::use_vignette("how_to_use")
library(just.install)
devtools::build_vignettes()
knitr::opts_chunk$set(
echo=TRUE,
eval=FALSE,
comment = "#>"
)
devtools::build_vignettes()
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
usethis::use_mit_license()
pkgdown::build_site()
pkgdown::build_site()
devtools::build_vignettes()
pkgdown::build_site()
pkgdown::build_site()
install.packages("mongolite")
library(mongolite)
food <- mongo("food", url = "mongodb://mongo_root:*****@localhost:28017/mongodb?authSource=admin&readPreference=primary&appname=MongoDB%20Compass&directConnection=true&ssl=falsed")
food <- mongo("food", url = "mongodb://mongo_root:mongo_root()@localhost:28017/mongodb?authSource=admin&readPreference=primary&appname=MongoDB%20Compass&directConnection=true&ssl=falsed")
food <- mongo("food", url = "mongodb://mongo_root:mongo_root()@localhost:28017/mongodb?authSource=admin&readPreference=primary&appname=MongoDB%20Compass&directConnection=true&ssl=false")
food <- mongo("food", url = "mongodb://mongo_root:mongo_root()@localhost:28017/mongodb?authSource=admin&readPreference=primary&ssl=false")
View(food)
setwd("/Volumes/Carlos/mongodump/dump/off")
flt$import(file("products.metadata.bson"), bson = TRUE)
food$import(file("products.metadata.bson"), bson = TRUE)
food$import(file("products.bson"), bson = TRUE)
food <- mongo("food", url = "mongodb://mongo_root:mongo_root()@localhost:28017/mongodb?authSource=admin&readPreference=primary&ssl=false")
food
usethis::use_github_action_check_standard()
usethis::use_coverage("codecov")
use_github_action("test-coverage")
pkgdown::clean_site()
pkgdown::build_site()
